'use client';

import { useState, useEffect } from 'react';
import { format, parseISO, isBefore, isAfter, addDays, startOfDay } from 'date-fns';
import { ko } from 'date-fns/locale';
import Link from 'next/link';

// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ - ÏµúÍ∑º Í≥µÏßÄÏÇ¨Ìï≠ Î∞è Î¥âÏÇ¨ ÏùºÏ†ï
const notices = [
  { id: 1, title: '6Ïõî Î¥âÏÇ¨ÌôúÎèô Í≥ÑÌöç ÏïàÎÇ¥', date: '2023-06-01', type: 'Í≥µÏßÄ' },
  { id: 2, title: 'Ïã†Í∑ú Î¥âÏÇ¨Ïûê ÍµêÏú° ÏùºÏ†ï', date: '2023-06-05', type: 'ÏïàÎÇ¥' },
  { id: 3, title: 'Ï†ÑÏãúÎåÄ Î¥âÏÇ¨ Ïû•ÏÜå Î≥ÄÍ≤Ω ÏïàÎÇ¥', date: '2023-06-08', type: 'Ï§ëÏöî' },
];

const schedules = [
  { id: 1, title: 'Ï§ëÏïôÏó≠ Í¥ëÏû• Ï†ÑÏãúÎåÄ', date: '2023-06-10', participants: 2, max: 6 },
  { id: 2, title: 'ÏãúÎØº Í≥µÏõê Î¥âÏÇ¨ÌôúÎèô', date: '2023-06-15', participants: 3, max: 6 },
  { id: 3, title: 'Î∂ÅÎ∂Ä Ï†ÑÏãúÍ¥Ä ÏïàÎÇ¥', date: '2023-06-20', participants: 1, max: 4 },
];

// Í≥µÏßÄÏÇ¨Ìï≠ Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î™®Ìã∞ÏΩò
const categoryEmojis = {
  'ÌöåÏ§ë': 'üèõÔ∏è',
  'ÏàúÌöåÍµ¨': 'üîÑ',
  'Í∏∞ÌÉÄ': 'üì¢'
};

// Ï§ëÏöîÎèÑ Ïù¥Î™®Ìã∞ÏΩò
const importanceLevelEmojis = {
  'high': 'üîº',
  'medium': '‚è∫Ô∏è',
  'low': 'üîΩ'
};

// Î¥âÏÇ¨ Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥
const serviceCategories = [
  { id: 'house', name: 'Por Casas', emoji: 'üè†' },
  { id: 'revisit', name: 'Revisitas/Estudios', emoji: 'üìö' },
  { id: 'cart', name: 'Carrito', emoji: 'üõí' },
  { id: 'letter', name: 'Cartas/Llamadas', emoji: '‚úâÔ∏è' }
];

// Ïπ¥ÌÖåÍ≥†Î¶¨ IDÎ°ú Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥ Ï∞æÍ∏∞
const getCategoryById = (categoryId) => {
  return serviceCategories.find(cat => cat.id === categoryId) || serviceCategories[0]; // Í∏∞Î≥∏Í∞íÏùÄ Ìò∏Î≥Ñ
};

// Í≥µÏßÄÏÇ¨Ìï≠ Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
const NoticeCard = ({ notice, onClick }) => {
  return (
    <div 
      className="bg-white rounded-lg shadow-md p-4 cursor-pointer hover:shadow-lg transition-shadow"
      onClick={onClick}
    >
      <div className="flex items-center mb-2">
        <span className="text-xl mr-2">{categoryEmojis[notice.category]}</span>
        <h3 className="font-bold text-lg">{notice.title}</h3>
        {notice.importance === 'high' && (
          <span className="ml-2 bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full">Importante</span>
        )}
      </div>
      <p className="text-sm text-gray-500 mb-2">{notice.date} ‚Ä¢ {notice.category}</p>
      <p className="text-gray-700 line-clamp-2">{notice.content}</p>
    </div>
  );
};

// Î¥âÏÇ¨ ÏùºÏ†ï Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
const ScheduleCard = ({ schedule, onClick }) => {
  const date = parseISO(schedule.date);
  const formattedDate = format(date, 'MM.dd (EEE)', { locale: ko });
  const guidesCount = schedule.participants.length;
  const category = getCategoryById(schedule.category);
  
  return (
    <div 
      className="bg-white rounded-lg shadow-md p-4 cursor-pointer hover:shadow-lg transition-shadow"
      onClick={onClick}
    >
      <div className="flex justify-between mb-2">
        <div className="flex items-center">
          <span className="text-xl mr-2">{category.emoji}</span>
          <h3 className="font-bold">{schedule.location}</h3>
        </div>
        <span className="text-sm font-medium text-blue-600">
          {guidesCount}/{schedule.maxParticipants} personas
        </span>
      </div>
      <div className="flex items-center justify-between text-sm text-gray-600">
        <div className="flex items-center space-x-2">
          <span>{formattedDate}</span>
          <span>‚Ä¢</span>
          <span>{schedule.time}</span>
        </div>
        <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">{category.name}</span>
      </div>
    </div>
  );
};

// Í≥µÏßÄÏÇ¨Ìï≠ Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
const NoticeModal = ({ notice, onClose }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div className="p-5">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center">
              <span className="text-2xl mr-2">{categoryEmojis[notice.category]}</span>
              <h2 className="text-xl font-bold">{notice.title}</h2>
              {notice.importance === 'high' && (
                <span className="ml-2 bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full">Importante</span>
              )}
            </div>
            <button 
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <p className="text-sm text-gray-500 mb-4">{notice.date} ‚Ä¢ {notice.category}</p>
          <div className="border-t border-gray-100 pt-4">
            <p className="text-gray-700 whitespace-pre-line">{notice.content}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Î¥âÏÇ¨ ÏùºÏ†ï Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏
const ScheduleModal = ({ schedule, onClose, onApply }) => {
  const [name, setName] = useState('');
  const date = parseISO(schedule.date);
  const formattedDate = format(date, 'yyyyÎÖÑ MMÏõî ddÏùº (EEE)', { locale: ko });
  const guidesCount = schedule.participants.length;
  const isFull = guidesCount >= schedule.maxParticipants;
  const category = getCategoryById(schedule.category);
  
  const handleSubmit = (e) => {
    e.preventDefault();
    if (name.trim() && !isFull) {
      onApply(name.trim());
      setName('');
    }
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div className="p-5">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center flex-wrap">
              <span className="text-2xl mr-2">{category.emoji}</span>
              <h2 className="text-xl font-bold">{schedule.location}</h2>
              <span className="ml-2 bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">{category.name}</span>
              {schedule.isRecurring && (
                <span className="ml-2 mt-1 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">Recurrente Semanal</span>
              )}
            </div>
            <button 
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <div className="mb-4">
            <div className="flex items-center mb-2">
              <svg className="w-5 h-5 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p className="text-gray-700">{formattedDate}</p>
            </div>
            <div className="flex items-center mb-2">
              <svg className="w-5 h-5 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-gray-700">{schedule.time}</p>
            </div>
            <div className="flex items-center mb-2">
              <svg className="w-5 h-5 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              <p className="text-gray-700">Gu√≠as: {guidesCount}/{schedule.maxParticipants} personas</p>
            </div>
          </div>
          
          <div className="border-t border-gray-100 pt-4 mb-4">
            <h3 className="font-medium mb-2">Lista de Gu√≠as</h3>
            {schedule.participants.length > 0 ? (
              <div className="flex flex-wrap gap-1">
                {schedule.participants.map((participant, index) => (
                  <span 
                    key={index}
                    className="inline-block bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs"
                  >
                    {participant}
                  </span>
                ))}
              </div>
            ) : (
              <p className="text-sm text-gray-500">No hay gu√≠as registrados.</p>
            )}
          </div>
          
          {!isFull && (
            <div className="border-t border-gray-100 pt-4">
              <h3 className="font-medium mb-2">Solicitud de Servicio</h3>
              <form onSubmit={handleSubmit} className="flex space-x-2">
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="Ingrese su nombre"
                  className="flex-grow p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
                <button
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                  Solicitar
                </button>
              </form>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default function HomePage() {
  const [notices, setNotices] = useState([]);
  const [schedules, setSchedules] = useState([]);
  const [selectedNotice, setSelectedNotice] = useState(null);
  const [selectedSchedule, setSelectedSchedule] = useState(null);
  
  // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Í≥µÏßÄÏÇ¨Ìï≠ Î∂àÎü¨Ïò§Í∏∞
      const savedNotices = JSON.parse(localStorage.getItem('notices') || '[]');
      setNotices(savedNotices);
      
      // Î¥âÏÇ¨ ÏùºÏ†ï Î∂àÎü¨Ïò§Í∏∞
      const savedSchedules = JSON.parse(localStorage.getItem('schedules') || '[]');
      setSchedules(savedSchedules);
    }
  }, []);
  
  // Ïò§Îäò ÎÇ†Ïßú
  const today = startOfDay(new Date());
  
  // Í≥µÏßÄÏÇ¨Ìï≠ Ï†ïÎ†¨ (Ï§ëÏöîÎèÑ ÎÇ¥Î¶ºÏ∞®Ïàú, ÎÇ†Ïßú ÎÇ¥Î¶ºÏ∞®Ïàú) Î∞è ÏßÄÎÇú Í≥µÏßÄÏÇ¨Ìï≠ ÌïÑÌÑ∞ÎßÅ
  const sortedNotices = [...notices]
    .filter(notice => {
      // Í≥µÏßÄÏÇ¨Ìï≠ÏùÄ ÎãπÏùºÍπåÏßÄ ÌëúÏãú
      const noticeDate = parseISO(notice.date);
      return !isBefore(noticeDate, today);
    })
    .sort((a, b) => {
      // Î®ºÏ†Ä Ï§ëÏöîÎèÑÎ°ú Ï†ïÎ†¨
      const importanceOrder = { 'high': 0, 'medium': 1, 'low': 2 };
      if (importanceOrder[a.importance] !== importanceOrder[b.importance]) {
        return importanceOrder[a.importance] - importanceOrder[b.importance];
      }
      // Îã§ÏùåÏúºÎ°ú ÎÇ†Ïßú ÎÇ¥Î¶ºÏ∞®Ïàú Ï†ïÎ†¨
      return new Date(b.date) - new Date(a.date);
    });
  
  // Îã§Í∞ÄÏò§Îäî ÏùºÏ†ï ÌïÑÌÑ∞ÎßÅ Î∞è Ï†ïÎ†¨ (ÎÇ†Ïßú Ïò§Î¶ÑÏ∞®Ïàú)
  const upcomingSchedules = schedules
    .filter(schedule => {
      // ÏßÄÎÇú ÏùºÏ†ï Ï†úÏô∏
      const scheduleDate = startOfDay(parseISO(schedule.date));
      return !isBefore(scheduleDate, today);
    })
    .sort((a, b) => parseISO(a.date) - parseISO(b.date));
  
  // Î¥âÏÇ¨ Ïã†Ï≤≠ Ìï∏Îì§Îü¨
  const handleApply = (name) => {
    if (selectedSchedule) {
      const updatedSchedules = schedules.map(schedule =>
        schedule.id === selectedSchedule.id
          ? {
              ...schedule,
              participants: [...schedule.participants, name]
            }
          : schedule
      );
      
      // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
      localStorage.setItem('schedules', JSON.stringify(updatedSchedules));
      setSchedules(updatedSchedules);
      
      // ÏÑ†ÌÉùÎêú ÏùºÏ†ï ÏóÖÎç∞Ïù¥Ìä∏
      const updatedSchedule = updatedSchedules.find(s => s.id === selectedSchedule.id);
      setSelectedSchedule(updatedSchedule);
    }
  };
  
  return (
    <div className="p-4 max-w-4xl mx-auto">
      {/* ÏÉÅÎã® Î∞∞ÎÑà */}
      <div className="bg-gradient-to-r from-blue-500 to-blue-700 text-white rounded-lg shadow-md p-4 sm:p-6 mb-6">
        <h1 className="font-bold text-xl sm:text-2xl mb-2">Congregaci√≥n Viaducto Chino</h1>
        <p>Gracias por su amor y esfuerzo</p>
      </div>
      
      {/* Í≥µÏßÄÏÇ¨Ìï≠ ÏÑπÏÖò */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="font-bold text-lg sm:text-xl">Anuncios</h2>
          <Link href="/admin/notices" className="text-sm text-blue-600 hover:underline">
            Ver m√°s
          </Link>
        </div>
        
        {sortedNotices.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {sortedNotices.slice(0, 4).map(notice => (
              <NoticeCard
                key={notice.id}
                notice={notice}
                onClick={() => setSelectedNotice(notice)}
              />
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-md p-8 text-center text-gray-500">
            <p>No hay anuncios para mostrar.</p>
          </div>
        )}
      </div>
      
      {/* Îã§Í∞ÄÏò§Îäî Î¥âÏÇ¨ ÏùºÏ†ï ÏÑπÏÖò */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="font-bold text-lg sm:text-xl">Pr√≥ximos Horarios de Servicio</h2>
          <Link 
            href="/volunteer"
            className="text-sm text-blue-600 hover:underline"
          >
            Ver m√°s horarios
          </Link>
        </div>
        
        {upcomingSchedules.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {upcomingSchedules.slice(0, 6).map(schedule => (
              <ScheduleCard
                key={schedule.id}
                schedule={schedule}
                onClick={() => setSelectedSchedule(schedule)}
              />
            ))}
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-md p-8 text-center text-gray-500">
            <p>No hay horarios de servicio para mostrar.</p>
          </div>
        )}
      </div>
      
      {/* Î™®Îã¨ */}
      {selectedNotice && (
        <NoticeModal
          notice={selectedNotice}
          onClose={() => setSelectedNotice(null)}
        />
      )}
      
      {selectedSchedule && (
        <ScheduleModal
          schedule={selectedSchedule}
          onClose={() => setSelectedSchedule(null)}
          onApply={handleApply}
        />
      )}
    </div>
  );
} 